	JSP, Java Server Pages
		- 자바를 사용해 서버에서 페이지를 만드는 기술
		- 클라이언트의 요청에 따라 서버에서 페이지를 동적으로 만드는 기술
		- Servlet 기술의 다음 버전
	
	Servlet 장점
		- Java를 사용한다.
	
	Servlet 단점
		- HTML, CSS, JavaScript 작성이 힘들다. > 모두 문자열 취급
		- Java 베이스 + 클라이언트 코드
		- Java 베이스 > 웹 요청 불가능 > 가상 주소 매핑(*.do) 필요
	
	JSP 장점
	- HTML, CSS, JavaScript 작성이 쉽다.
		- HTML 베이스 + Java 코드 > 개발자 작업 편의성이 높다.
		- HTML 베이스 > 웹 요청 가능 > 가상 주소 매핑 불필요
	
	JSP 단점
		- HTML 베이스 > Java 작업 불편
	
	
	JSP 저장 위치
	1. src/main/java [ 소스 폴더 ]
		- 모든 패키지
		- 모든 *.java
		
	2. src/main/webapp [ 루트 폴더 or 웹 루트 폴더 or 컨텐츠 루트 폴더 ]
		- 모든 리소스(*.html, *.css, *.js, 이미지, 동영상 등...)
		- JSP 페이지(*.jsp) 
	
	Servlet/JSP 컨테이너
		- Servlet과 JSP를 해석하고 실행하는 프로그램
		- Tomcat
		- WAS(Web Application Server): 서버에서 특정 언어(Java)를 처리하고 웹 사이트를 만드는 일을 하는 프로그램
		- Web Application(웹 어플리케이션) == Web Site(웹 사이트)
		
	JSP 기본요소
	1. JSP 지시자(지시어), JSP Directive
		[ 정의 ]
			- <%@ xxx %>
			- JSP 페이지를 실행하기 위해 JSP 컨테이너(실행기, Tomcat)에게 해당 JSP 페이지를 처리하기 위한 여러가지 환경 설정을 한다.
		[ 종류 ]
			- page 지시자
			- include 지시자
			- taglib 지시자
		
	2. 스크립트 요소, Scripting Elements
		[ 정의 ]
			- <% %>
			- 자바를 사용할 수 있게 한다.
			- 서블릿과 유사한 작업 환경을 만들어 준다.
		[ 종류 ]
			- 스크립틀릿, Scriptlet
			- 익스프레션, Expression
			- 선언부, Declaration
		
	3. 액션 태그, Action Tags
		[ 정의 ]
			- <jsp:XXX>, <c:XXX>
			- JSP에서 만들어낸 태그
			- HTML 태그: 정적, 표현 목적
			- JSP 태그: 동적, 프로그래밍 기능 목적
			- ex) if문 쓰려고 할 때? <c:if>, for문 쓰려고 할 때? <c:for>
		[ 종류 ]
			- JSP 기본 액션 태그
			- JSTL 확장 액션 태그
			- 사용자 정의 액션 태그
	
	
	
	
	page 지시자
		[ 정의 ]
		- <%@ page %>
		- <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
			[ 의미 ]
			1. language: JSP 페이지에서 프로그래밍 언어 지정
			
			2. contentType 
				- 현재 페이지의 컨텐츠에 대한 기술
				- text/html, text/plain, image/jpeg, image/gif, application/json, text/xml : MINE
				- contentType="text/html; charset=UTF-8"	
				- UTF-8: 톰캣에게 현재 JSP 페이지가 UTF-8 인코딩으로 되어있다고 알려준다. (*******)
			
			3. pageEncoding
				- UTF-8: 브라우저에게 돌려줄 페이지의 인코딩을 지정
				
			4. import
				- 패키지 or 클래스 참조
				- 자바의 import와 동일한 역할
			
			5. errorPage
				- 에러 페이지로 사용할 페이지의 URL을 지정
				
			상태 코드, Status Code
				- 브라우저 <- 요청(응답) -> 웹서버
				- 콘텐츠 전달 + 상태 코드 전달
				- 브라우저와 웹서버간의 현재 상태를 식별하기 위한 코드
					----------------------------------------- 화면 출력 X
					- 1xx
					- 2xx: 200 OK : 성공을 의미한다.
					- 3xx: 리다이액트(지금 설명못함)
			
					----------------------------------------- 화면 출력 O
					- 4xx: 클라이언트 오류(브라우저 실수)
						a. 401 Unauthorized: 인증 오류
						b. 403 Forbidden: 서버가 요청 거부(권한)
						c. 404 Not Found: 요청한 리소스가 없다. (URL 틀림)
						d. 405 Method Not Allowed: 요청 방식과 응답 방식이 서로 다를 때(GET, POST)
						e. 406 Request Timeout: 요청 시간 만료
					
					- 5xx: 서버 오류(개발자 실수)
						a. 500 Internal Server Error: 서버 작업 중 오류 발생(자바, 오라클 에러 등..)
				
	
	include 지시자
		[ 정의 ]
		- <%@ include file="URL" %>
		- 특정 JSP/HTML 페이지를 현재 JSP 페이지의 일부 영역에 삽입
		- <iframe> 유사
		- 페이지의 일부로 삽입되기 때문에, 부모 페이지와 중첩되면 안되는 코드가 있는지 항상 확인한다!!!!( <html>, <body>.... )
	
	taglib 지시자
		[ 정의 ] 
		- 액션 태그와 관련된 요소
		- 현재는 공부 X
		
	스크립틀릿, Scriptlet
		- Script + Applet(웹 페이지에 삽입되는 프로그램, ActiveX, Flash)
		- <% %>
		- 이 영역은 자바 영역이다 ( *.java 파일이라고 생각하고 코딩하면 된다. )
		- 역할: 주로 비지니스(업무) 코드 작업
			a. 데이터 처리
			b. 동적 HTML(CSS, JavaScript) 처리
		- 사용 빈도 높음
		
	익스프레션, Expression
		- <%= 값 %>
		- 값: 상수, 변수, 메소드 반환값 등...
		- System.out.print()와 비슷한 역할
		- 출력 목적: 화면에 무언가를 보이게 하기 위해가 아니라, 
					 HTML 소스의 일부를 작성하기 위해서이다. (*************)
					 
	선언부, Declaration
		- <%! %>
		- 현재 JSP 페이지에서 사용할 멤버 변수와 멤버 메소드를 선언하는 영역
		- 잘 사용 안함 > 대신 사용하는 방법이 따로 있음
		

	JSP 내장 객체, JSP Implicit Object
		- 개발자가 직접 생성하지 않아도, JSP가 미리 만들어서 제공하는 객체(톰캣이 만든다!!!)
		- 예약어를 사용해서 얻어온다.
		- JSP 내장 객체는 Servlet에도 동일하게 있다. 단, Servlet에서는 직접 만들어서 사용한다. (내장 객체라는 형식이 존재하지 않기 때문..)
		- request, response, session, pageContext, out, application, config, page, exception 등..
		[ 사용 빈도 ] 	
		- request, response, session, pageContext >> out, application >> config, page, exception 등..	
	
	JSP 내장 객체 저장소
		- request, session, pageContext, application
		- 내부에 사용자 데이터를 저장할 수 있는 Map을 가지고 있다.(*********)		
		- setAttribute(key, value), getAttribute(key)
		
		a. request
			- 클라이언트(브라우저)가 서버에게 전송한 데이터를 받아오는 기능(****************)
				- ex06_form.jsp
				- ex06_ok.jsp
				
				- ex07_form.jsp
				- ex07_ok.jsp
				
			- 클라이언트(브라우저)가 서버에게 전송한 데이터의 인코딩 처리
			- 클라이언트(브라우저)가 서버에게 페이지 요청 시 관련된 정보 가져오기
				
		
		
		
		
		
		